-- Copyright (c) 2019, President and Fellows of Harvard College
-- Developed by Griffin M Weber, MD, PhD (weber@hms.harvard.edu)
-- This Source Code Form is subject to the terms of the Mozilla Public
-- License, v. 2.0. If a copy of the MPL was not distributed with this
-- file, You can obtain one at http://mozilla.org/MPL/2.0/.

/*
#####################################################################################################

Import i2b2 Ontology Into LeafDB

INTRODUCTION:
This script generates Leaf concepts based on an i2b2 ontology.

INSTRUCTIONS:
Edit the data in the first section of this script to indicate 
the i2b2 database and schema names of your i2b2 tables and any 
prefixes that should be added to concept names in the Leaf UI 
display text. Then, run the script on the LeafDB. Note that the
script needs to be able to query the i2b2 ontology (ONT) cell.  

LIMITATIONS:
1) This script does not calculate the number of patients per
   concept or the breakdowns by year. It will use the C_TOTALNUM
   value in the i2b2 ontology as the total number of patients.
2) This script only handles numeric values. It does not convert
   categorical values into Leaf.
3) This script includes a hard-coded example on how to import 
   modifiers. However, it does not include a general way of doing 
   this.
4) Multiple fact tables are not supported.
5) The Leaf SQL generated by this script is not optimized for
   large i2b2 databases.

VERSION HISTORY:
2019-08-01 - Initial release (Griffin M Weber)

#####################################################################################################
*/

--***************************************************************************************************
--***************************************************************************************************
--*** Edit this section based on your i2b2 implementation
--***************************************************************************************************
--***************************************************************************************************
USE LeafDB
GO

-----------------------------------------------------------------------------------------------------
-- Indicate the database and schema of your i2b2 ONT and CRC tables
-----------------------------------------------------------------------------------------------------

CREATE TABLE #i2b2DatabaseSchema (
	Cell VARCHAR(10) PRIMARY KEY,
	DatabaseName VARCHAR(200) NOT NULL,
	SchemaName VARCHAR(200) NOT NULL
)
INSERT INTO #i2b2DatabaseSchema (Cell, DatabaseName, SchemaName)
	SELECT 'ONT','i2b2metadata','dbo'
	UNION ALL 
	SELECT 'CRC','i2b2crcdata','dbo'

-----------------------------------------------------------------------------------------------------
-- Define prefixes for the display text of concepts
-----------------------------------------------------------------------------------------------------

CREATE TABLE #PathPrefix (
	Pattern VARCHAR(700) PRIMARY KEY,
	Prefix VARCHAR(700) NOT NULL
)
INSERT INTO #PathPrefix (Pattern, Prefix)
	SELECT '', 'Has ' -- Prefix for all root concepts
	-- Prefix for subtrees in the ontology
	UNION ALL SELECT '\i2b2\Demographics\_%', 'Are '
	UNION ALL SELECT '\i2b2\Diagnoses\_%', 'Had a diagnosis of '
	UNION ALL SELECT '\i2b2\Labtests\_%', 'Had a lab test '
	UNION ALL SELECT '\i2b2\Medications\_%', 'Had a medication '
	UNION ALL SELECT '\i2b2\Procedures\_%', 'Had a procedure or '
	UNION ALL SELECT '\i2b2\Providers\_%', 'Had a provider '
	UNION ALL SELECT '\i2b2\Visit Details\_%', 'Had a visit of '

--***************************************************************************************************
--***************************************************************************************************
--*** Delete existing Leaf concepts
--***************************************************************************************************
--***************************************************************************************************

TRUNCATE TABLE app.ConceptForwardIndex
TRUNCATE TABLE app.ConceptTokenizedIndex
DELETE FROM app.ConceptInvertedIndex
TRUNCATE TABLE rela.ConceptSpecializationGroup
TRUNCATE TABLE rela.QueryConceptDependency
TRUNCATE TABLE app.PanelFilter
DELETE FROM app.Concept
TRUNCATE TABLE app.Specialization
DELETE FROM app.SpecializationGroup
DELETE FROM app.ConceptSqlSet

--***************************************************************************************************
--***************************************************************************************************
--*** Load the i2b2 ontology into the #i2b2 temp table
--***************************************************************************************************
--***************************************************************************************************

CREATE TABLE #i2b2 (
	Id UNIQUEIDENTIFIER NOT NULL,
	ParentId UNIQUEIDENTIFIER NULL,
	RootId UNIQUEIDENTIFIER NULL,
	IsParent INT NOT NULL,
	IsRoot INT NOT NULL,
	DisplayText VARCHAR(1000),
	OntTable VARCHAR(50) NOT NULL,
	C_HLEVEL INT NOT NULL,
	C_FULLNAME VARCHAR(700) NOT NULL,
	C_NAME VARCHAR(2000) NOT NULL,
	C_TOTALNUM INT NULL,
	C_BASECODE VARCHAR(50) NULL,
	C_METADATAXML text NULL,
	C_FACTTABLECOLUMN VARCHAR(50) NOT NULL,
	C_TABLENAME VARCHAR(50) NOT NULL,
	C_COLUMNNAME VARCHAR(50) NOT NULL,
	C_COLUMNDATATYPE VARCHAR(50) NOT NULL,
	C_OPERATOR VARCHAR(10) NOT NULL,
	C_DIMCODE VARCHAR(700) NOT NULL,
	C_TOOLTIP VARCHAR(900) NULL,
	M_APPLIED_PATH VARCHAR(700) NOT NULL,
	M_EXCLUSION_CD VARCHAR(25) NULL,
	SOURCESYSTEM_CD VARCHAR(50) NULL
)

-----------------------------------------------------------------------------------------------------
-- Get the list of ontology tables
-----------------------------------------------------------------------------------------------------

DECLARE @sqlTableAccess NVARCHAR(MAX)
SELECT @sqlTableAccess = 'SELECT NEWID() Id, CAST(NULL AS UNIQUEIDENTIFIER) ParentId, CAST(NULL AS UNIQUEIDENTIFIER) RootId, 0 IsParent, 1 IsRoot, NULL DisplayText, C_TABLE_NAME' 
			+', C_HLEVEL, C_FULLNAME, C_NAME, C_TOTALNUM, C_BASECODE, C_METADATAXML, C_FACTTABLECOLUMN, C_DIMTABLENAME, C_COLUMNNAME, C_COLUMNDATATYPE, C_OPERATOR, C_DIMCODE, C_TOOLTIP, ''@'' M_APPLIED_PATH, NULL M_EXCLUSION_CD, NULL SOURCESYSTEM_CD'
			+' FROM '+DatabaseName+'.'+SchemaName+'.TABLE_ACCESS'
			+' WHERE C_PROTECTED_ACCESS=''N'' AND C_SYNONYM_CD=''N'' AND C_VISUALATTRIBUTES LIKE ''_[A]%'' '
	FROM #i2b2DatabaseSchema
	WHERE Cell='ONT'

INSERT INTO #i2b2
	EXEC sp_executesql @sqlTableAccess

-----------------------------------------------------------------------------------------------------
-- Get the items in each ontology table
-----------------------------------------------------------------------------------------------------

DECLARE @sqlOntTables NVARCHAR(MAX)
SELECT @sqlOntTables = SUBSTRING(CAST((
		SELECT 'UNION ALL SELECT NEWID() Id, CAST(NULL AS UNIQUEIDENTIFIER) ParentId, CAST(NULL AS UNIQUEIDENTIFIER) RootId, 0 IsParent, 0 IsRoot, NULL DisplayText, '''+OntTable+''' C_TABLE_NAME '
			+', C_HLEVEL, C_FULLNAME, C_NAME, C_TOTALNUM, C_BASECODE, C_METADATAXML, C_FACTTABLECOLUMN, C_TABLENAME, C_COLUMNNAME, C_COLUMNDATATYPE, C_OPERATOR, C_DIMCODE, C_TOOLTIP, M_APPLIED_PATH, M_EXCLUSION_CD, SOURCESYSTEM_CD'
			+' FROM '+DatabaseName+'.'+SchemaName+'.['+OntTable+']'
			+' WHERE C_SYNONYM_CD=''N'' AND C_VISUALATTRIBUTES LIKE ''_[A]%'' '
		FROM #i2b2DatabaseSchema CROSS JOIN (SELECT DISTINCT OntTable FROM #i2b2) t
		WHERE Cell='ONT'
		FOR XML PATH(''), TYPE
	) AS VARCHAR(MAX)),11,4000)

INSERT INTO #i2b2
	EXEC sp_executesql @sqlOntTables

ALTER TABLE #i2b2 ADD PRIMARY KEY (C_FULLNAME,Id)

--***************************************************************************************************
--***************************************************************************************************
--*** Process the ontology
--***************************************************************************************************
--***************************************************************************************************

-----------------------------------------------------------------------------------------------------
-- Separate modifiers into their own table
-----------------------------------------------------------------------------------------------------

SELECT *
	INTO #Modifiers
	FROM #i2b2
	WHERE M_APPLIED_PATH<>'@'

DELETE FROM #i2b2 WHERE M_APPLIED_PATH<>'@'

-----------------------------------------------------------------------------------------------------
-- Set the RootId for each concept
-----------------------------------------------------------------------------------------------------

UPDATE #i2b2
	SET RootId=Id
	WHERE IsRoot=1

UPDATE c
	SET c.RootId=r.Id
	FROM #i2b2 r
		INNER JOIN #i2b2 c
			ON c.OntTable=r.OntTable AND c.C_FULLNAME LIKE r.C_FULLNAME+'_%'
	WHERE r.IsRoot=1

-- Delete concepts with no root
DELETE 
	FROM #i2b2
	WHERE RootId IS NULL

-----------------------------------------------------------------------------------------------------
-- Set the ParentId for each concept
-----------------------------------------------------------------------------------------------------

-- Get a list of potential parent paths
;WITH a AS (
	SELECT 0 n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9
), n AS (
	SELECT a.n+10*b.n+100*c.n n FROM a, a b, a c
)
SELECT Id, C_FULLNAME, ISNULL(LEFT(C_FULLNAME,n+2),'') PARENT_PATH, C_HLEVEL, ISNULL(n,0) PATH_LENGTH
	INTO #ParentPaths
	FROM (
		SELECT Id, C_HLEVEL, C_FULLNAME, n
		FROM #i2b2 i, n
		WHERE n.n < LEN(C_FULLNAME)-2
	) t
	WHERE SUBSTRING(C_FULLNAME,n+2,1)='\'

ALTER TABLE #ParentPaths ADD PRIMARY KEY (C_FULLNAME,Id,PATH_LENGTH)

-- Assign the actual ParentId
UPDATE i
	SET i.ParentId=j.Id
	FROM #ParentPaths p
		INNER JOIN #i2b2 i
			ON p.C_FULLNAME=i.C_FULLNAME AND p.Id=i.Id
		INNER JOIN #i2b2 j
			ON p.PARENT_PATH=j.C_FULLNAME AND p.C_HLEVEL=j.C_HLEVEL+1

-- Flag concepts that are parents
UPDATE #i2b2
	SET IsParent=1
	WHERE Id IN (
		SELECT DISTINCT ParentId FROM #i2b2 WHERE ParentId IS NOT NULL
	)

-----------------------------------------------------------------------------------------------------
-- Identify concepts with a numeric value and extract the units if available
-----------------------------------------------------------------------------------------------------

SELECT Id, (CASE WHEN a>0 and b>a THEN SUBSTRING(C_METADATAXML,a+13,b-a-13) ELSE NULL END) Units
		INTO #NumericConcepts
	FROM (
		SELECT Id, C_METADATAXML, CHARINDEX('<NormalUnits>',C_METADATAXML) a, CHARINDEX('</NormalUnits>',C_METADATAXML) b
		FROM #i2b2
		WHERE C_METADATAXML IS NOT NULL
			AND (C_METADATAXML LIKE '%<DataType>PosInteger</DataType>%'
					OR C_METADATAXML LIKE '%<DataType>PosFloat</DataType>%'
					OR C_METADATAXML LIKE '%<DataType>Integer</DataType>%'
					OR C_METADATAXML LIKE '%<DataType>Float</DataType>%'
				)
	) t

ALTER TABLE #NumericConcepts ADD PRIMARY KEY (Id)

-----------------------------------------------------------------------------------------------------
-- Generate the display text for each concept
-----------------------------------------------------------------------------------------------------

-- Use the C_NAME by default
UPDATE #i2b2 SET DisplayText = LEFT(C_NAME, 1000)

-- Remove the 'zz ' prefix that pushes concepts to the bottom of the ontology hierarchy in i2b2
UPDATE #i2b2
	SET DisplayText=SUBSTRING(DisplayText,4,2000)
	WHERE DisplayText LIKE 'zz %'

-- Add a prefix to the display text of root concepts
UPDATE #i2b2
	SET DisplayText = p.Prefix + LTRIM(i.DisplayText)
	FROM #i2b2 i CROSS JOIN #PathPrefix p
	WHERE i.IsRoot=1 AND p.Pattern=''

-- Add a prefix to the display text of concepts in subtrees
UPDATE #i2b2
	SET DisplayText = p.Prefix + LTRIM(i.DisplayText)
	FROM #i2b2 i
		INNER JOIN #PathPrefix p
			ON i.C_FULLNAME LIKE p.Pattern
	WHERE p.Pattern<>''

-- Add a space in front to root concept names
UPDATE #i2b2 SET C_NAME = ' '+C_NAME

-----------------------------------------------------------------------------------------------------
-- Hard-coded changes to the i2b2 demo ontology (delete or edit as needed)
-----------------------------------------------------------------------------------------------------

UPDATE #i2b2
	SET C_FACTTABLECOLUMN='PATIENT_NUM', C_TABLENAME='PATIENT_DIMENSION', C_COLUMNNAME='PATIENT_NUM', C_COLUMNDATATYPE='N', C_OPERATOR='IS NOT', C_DIMCODE='NULL'
	WHERE C_FULLNAME='\i2b2\Demographics\'

UPDATE #i2b2
	SET C_FACTTABLECOLUMN='ENCOUNTER_NUM', C_TABLENAME='VISIT_DIMENSION', C_COLUMNNAME='PATIENT_NUM', C_COLUMNDATATYPE='N', C_OPERATOR='IS NOT', C_DIMCODE='NULL'
	WHERE C_FULLNAME='\i2b2\Visit Details\'

UPDATE #i2b2
	SET C_DIMCODE=REPLACE(C_DIMCODE,'i2b2demodata.dbo.patient_dimension where patient_num = i2b2demodata.dbo.visit_dimension.patient_num','i2b2demodata.dbo.patient_dimension pdx where pdx.patient_num = @.patient_num')
	WHERE C_FULLNAME LIKE '\i2b2\Visit Details\Age at visit\%'

--***************************************************************************************************
--***************************************************************************************************
--*** Insert the concepts into the Leaf DB
--***************************************************************************************************
--***************************************************************************************************

-----------------------------------------------------------------------------------------------------
-- Create i2b2 Concept SQL Sets if they do not yet exist
-----------------------------------------------------------------------------------------------------

;WITH t AS (
	SELECT 0 IsEncounterBased, SchemaName+'.PATIENT_DIMENSION' SqlSetFrom, NULL SqlFieldDate 
		FROM #i2b2DatabaseSchema 
		WHERE Cell='CRC'
	UNION ALL
	SELECT 1, SchemaName+'.VISIT_DIMENSION', '@.START_DATE' 
		FROM #i2b2DatabaseSchema 
		WHERE Cell='CRC'
	UNION ALL
	SELECT 1, SchemaName+'.OBSERVATION_FACT', '@.START_DATE' 
		FROM #i2b2DatabaseSchema 
		WHERE Cell='CRC'
)
INSERT INTO app.ConceptSqlSet (IsEncounterBased, IsEventBased, SqlSetFrom, SqlFieldDate, SqlFieldEvent, Created, CreatedBy, Updated, UpdatedBy, EventId)
	SELECT IsEncounterBased, 0 IsEventBased, SqlSetFrom, SqlFieldDate, NULL, GETDATE(), 'i2b2', GETDATE(), 'i2b2', NULL
	FROM t
	WHERE SqlSetFrom NOT IN (SELECT SqlSetFrom FROM app.ConceptSqlSet) 
	
-----------------------------------------------------------------------------------------------------
-- Add the Concept records
-----------------------------------------------------------------------------------------------------

INSERT INTO app.Concept (
		Id, ParentId, RootId, ExternalId, ExternalParentId, UniversalId, 
		IsPatientCountAutoCalculated, [IsNumeric], IsParent, IsRoot, IsSpecializable, 
		SqlSetId, SqlSetWhere, SqlFieldNumeric, 
		UiDisplayName, UiDisplayText, 
		UiDisplaySubtext, UiDisplayUnits, UiDisplayTooltip, 
		UiDisplayPatientCount, UiDisplayPatientCountByYear, UiDisplayRowOrder, UiNumericDefaultText, 
		AddDateTime, PatientCountLastUpdateDateTime, ContentLastUpdateDateTime
	)
	SELECT i.Id, i.ParentId, i.RootId, null, null, null,
		0, IsLab, i.IsParent, i.IsRoot, 0,
		s.Id, 
		(CASE WHEN i.C_TABLENAME in ('patient_dimension','visit_dimension')
			THEN '@.'+dimSQL 
			ELSE '@.'+i.C_FACTTABLECOLUMN+' in (select dt.'+i.C_FACTTABLECOLUMN+' from '+x.DatabaseName+'.'+x.SchemaName+'.'+i.C_TABLENAME+' dt where dt.'+dimSQL+')'
			END),
		(CASE WHEN IsLab=1 THEN '@.NVAL_NUM' ELSE NULL END),
		LEFT(i.C_NAME, 400),
		i.DisplayText,
		NULL, l.Units, i.C_TOOLTIP,
		i.C_TOTALNUM, NULL, NULL, (CASE WHEN IsLab=1 THEN 'with value' ELSE NULL END),
		GETDATE(), NULL, GETDATE()
	FROM #i2b2 i
		CROSS JOIN #i2b2DatabaseSchema x
		INNER JOIN app.ConceptSqlSet s
			ON s.SqlSetFrom = x.SchemaName+'.'+(CASE WHEN i.C_TABLENAME IN ('patient_dimension','visit_dimension') THEN i.C_TABLENAME ELSE 'observation_fact' END)
		LEFT OUTER JOIN #NumericConcepts l ON i.Id=l.Id
		CROSS APPLY (
			SELECT 
				i.C_COLUMNNAME+' '+i.C_OPERATOR+' '
					+(CASE WHEN i.C_OPERATOR='LIKE' THEN ''''+REPLACE(REPLACE(i.C_DIMCODE,' with ',' w[i]th '),' WITH ',' W[I]TH ')+'%''' 
						WHEN i.C_OPERATOR='=' THEN ''''+i.C_DIMCODE+'''' 
						WHEN i.C_OPERATOR='IN' THEN '('+i.C_DIMCODE+')' 
						ELSE i.C_DIMCODE END) dimSQL,
				(CASE WHEN l.Id IS NOT NULL THEN 1 ELSE 0 END) IsLab
		) d
	WHERE x.Cell='CRC'

--***************************************************************************************************
--***************************************************************************************************
--*** This is an example of converting modifiers into sepcializations
--***************************************************************************************************
--***************************************************************************************************

INSERT INTO app.SpecializationGroup (SqlSetId, UiDefaultText, LastChanged, ChangedBy)
	SELECT s.Id, '[options]', GETDATE(), 'i2b2'
		FROM app.ConceptSqlSet s, #i2b2DatabaseSchema d
		WHERE d.Cell='CRC' AND s.SqlSetFrom=SchemaName+'.OBSERVATION_FACT'

INSERT INTO app.Specialization (SpecializationGroupId, UniversalId, UiDisplayText, SqlSetWhere, OrderId)
	SELECT g.Id SpecializationGroupId, NULL, C_NAME,
		'@.'+C_FACTTABLECOLUMN+' in ('
			+'select dt.'+C_FACTTABLECOLUMN
			+' from '+DatabaseName+'.'+SchemaName+'.'+C_TABLENAME+' dt'
			+' where dt.'+C_COLUMNNAME+' '+C_OPERATOR+' '
				+(CASE WHEN C_OPERATOR='LIKE' THEN ''''+REPLACE(REPLACE(C_DIMCODE,' with ',' w[i]th '),' WITH ',' W[I]TH ')+'%''' 
					WHEN C_OPERATOR='=' THEN ''''+C_DIMCODE+'''' 
					WHEN C_OPERATOR='IN' THEN '('+C_DIMCODE+')' 
					ELSE C_DIMCODE END)
			+')',
		ROW_NUMBER() OVER (ORDER BY C_NAME)
	FROM (
		SELECT *, ROW_NUMBER() OVER (PARTITION BY C_FULLNAME ORDER BY Id) k
		FROM #Modifiers
		WHERE C_METADATAXML IS NULL
	) t, #i2b2DatabaseSchema d, app.ConceptSqlSet s, app.SpecializationGroup g
	WHERE t.k=1 AND d.Cell='CRC' AND s.SqlSetFrom=d.SchemaName+'.OBSERVATION_FACT' AND g.UiDefaultText='[options]'
		AND C_FULLNAME IN ('\Admit Diagnosis\','\Principal Diagnosis\','\Secondary Diagnosis\')

INSERT INTO rela.ConceptSpecializationGroup (ConceptId, SpecializationGroupId, OrderId)
	SELECT DISTINCT i.Id, g.Id, 1
	FROM #Modifiers m, #i2b2DatabaseSchema d, app.ConceptSqlSet s, app.SpecializationGroup g, #i2b2 i
	WHERE d.Cell='CRC' AND s.SqlSetFrom=d.SchemaName+'.OBSERVATION_FACT' AND g.UiDefaultText='[options]'
		AND m.C_FULLNAME IN ('\Admit Diagnosis\','\Principal Diagnosis\','\Secondary Diagnosis\')
		AND i.C_FULLNAME LIKE m.M_APPLIED_PATH AND m.M_EXCLUSION_CD IS NULL

UPDATE app.Concept
	SET IsSpecializable=1
	WHERE Id IN (SELECT ConceptId FROM rela.ConceptSpecializationGroup)

--***************************************************************************************************
--***************************************************************************************************
--*** Update the search index
--***************************************************************************************************
--***************************************************************************************************

EXEC app.sp_UpdateSearchIndexTables;

